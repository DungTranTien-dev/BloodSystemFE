// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DAL.Models.Blood", b =>
                {
                    b.Property<Guid>("BloodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BloodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CollectedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ComponentType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<double?>("VolumeInML")
                        .HasColumnType("float");

                    b.HasKey("BloodId");

                    b.ToTable("Blood");
                });

            modelBuilder.Entity("DAL.Models.BloodRegistration", b =>
                {
                    b.Property<Guid>("BloodRegistrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DonationEventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BloodRegistrationId");

                    b.HasIndex("DonationEventId");

                    b.HasIndex("UserId");

                    b.ToTable("BloodRegistrations");
                });

            modelBuilder.Entity("DAL.Models.BloodRequest", b =>
                {
                    b.Property<Guid>("BloodRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BloodGroup")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ComponentType")
                        .HasColumnType("int");

                    b.Property<string>("HospitalName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RequestedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RequestedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double>("VolumeInML")
                        .HasColumnType("float");

                    b.HasKey("BloodRequestId");

                    b.ToTable("BloodRequests");
                });

            modelBuilder.Entity("DAL.Models.ChronicDisease", b =>
                {
                    b.Property<Guid>("ChronicDiseaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChronicDiseaseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChronicDiseaseId");

                    b.ToTable("ChronicDisease");

                    b.HasData(
                        new
                        {
                            ChronicDiseaseId = new Guid("a1e2c3d4-5f6a-7b8c-9d0e-1f2a3b4c5d6e"),
                            ChronicDiseaseName = "Tiểu đường"
                        },
                        new
                        {
                            ChronicDiseaseId = new Guid("b2d3e4f5-6a7b-8c9d-0e1f-2a3b4c5d6e7f"),
                            ChronicDiseaseName = "Cao huyết áp"
                        },
                        new
                        {
                            ChronicDiseaseId = new Guid("c3d4e5f6-7a8b-9c0d-1e2f-3a4b5c6d7e8f"),
                            ChronicDiseaseName = "Bệnh tim mạch"
                        },
                        new
                        {
                            ChronicDiseaseId = new Guid("d4e5f6a7-8b9c-0d1e-2f3a-4b5c6d7e8f9a"),
                            ChronicDiseaseName = "Hen suyễn"
                        },
                        new
                        {
                            ChronicDiseaseId = new Guid("e5f6a7b8-9c0d-1e2f-3a4b-5c6d7e8f9a0b"),
                            ChronicDiseaseName = "Bệnh thận"
                        },
                        new
                        {
                            ChronicDiseaseId = new Guid("f6a7b8c9-0d1e-2f3a-4b5c-6d7e8f9a0b1c"),
                            ChronicDiseaseName = "Bệnh gan"
                        },
                        new
                        {
                            ChronicDiseaseId = new Guid("a7b8c9d0-1e2f-3a4b-5c6d-7e8f9a0b1c2d"),
                            ChronicDiseaseName = "Ung thư"
                        },
                        new
                        {
                            ChronicDiseaseId = new Guid("b8c9d0e1-2f3a-4b5c-6d7e-8f9a0b1c2d3e"),
                            ChronicDiseaseName = "HIV/AIDS"
                        },
                        new
                        {
                            ChronicDiseaseId = new Guid("c9d0e1f2-3a4b-5c6d-7e8f-9a0b1c2d3e4f"),
                            ChronicDiseaseName = "Viêm gan B/C"
                        },
                        new
                        {
                            ChronicDiseaseId = new Guid("d0e1f2a3-4b5c-6d7e-8f9a-0b1c2d3e4f5a"),
                            ChronicDiseaseName = "Khác"
                        });
                });

            modelBuilder.Entity("DAL.Models.DonationEvent", b =>
                {
                    b.Property<Guid>("DonationEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DonationEventId");

                    b.ToTable("DonationEvent");
                });

            modelBuilder.Entity("DAL.Models.DonationHistory", b =>
                {
                    b.Property<Guid>("DonationHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BloodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DonationHistoryId");

                    b.HasIndex("UserId");

                    b.ToTable("DonationHistorys");
                });

            modelBuilder.Entity("DAL.Models.RefreshToken", b =>
                {
                    b.Property<Guid>("RefreshTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshTokenKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RefreshTokenId");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("DAL.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("c5d6e7f8-9a0b-1c2d-3e4f-5a6b7c8d9e0f"),
                            Email = "user@gmail.com",
                            Password = "$2a$11$rTz6DZiEeBqhVrzF25CgTOBPf41jpn2Tg/nnIqnX8KS6uIerB/1dm",
                            UserName = "User"
                        });
                });

            modelBuilder.Entity("DAL.Models.UserMedical", b =>
                {
                    b.Property<Guid>("UserMedicalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BloodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CitizenId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("DiseaseDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DonationCount")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("HasDonatedBefore")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserMedicalId");

                    b.HasIndex("BloodId");

                    b.HasIndex("UserId");

                    b.ToTable("UserMedicals");
                });

            modelBuilder.Entity("DAL.Models.UserMedicalChronicDisease", b =>
                {
                    b.Property<Guid>("UserMedicalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChronicDiseaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserMedicalChronicDiseaseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserMedicalId", "ChronicDiseaseId");

                    b.HasIndex("ChronicDiseaseId");

                    b.ToTable("UserMedicalChronicDisease");
                });

            modelBuilder.Entity("DAL.Models.BloodRegistration", b =>
                {
                    b.HasOne("DAL.Models.DonationEvent", "DonationEvent")
                        .WithMany("Registrations")
                        .HasForeignKey("DonationEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.User", "User")
                        .WithMany("BloodRegistrations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DonationEvent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Models.DonationHistory", b =>
                {
                    b.HasOne("DAL.Models.User", "User")
                        .WithMany("DonationHistorys")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Models.RefreshToken", b =>
                {
                    b.HasOne("DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Models.UserMedical", b =>
                {
                    b.HasOne("DAL.Models.Blood", "Blood")
                        .WithMany("UserMedicals")
                        .HasForeignKey("BloodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.User", "User")
                        .WithMany("UserMedicals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blood");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Models.UserMedicalChronicDisease", b =>
                {
                    b.HasOne("DAL.Models.ChronicDisease", "ChronicDisease")
                        .WithMany("UserMedicalChronicDiseases")
                        .HasForeignKey("ChronicDiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.UserMedical", "UserMedical")
                        .WithMany("UserMedicalChronicDiseases")
                        .HasForeignKey("UserMedicalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChronicDisease");

                    b.Navigation("UserMedical");
                });

            modelBuilder.Entity("DAL.Models.Blood", b =>
                {
                    b.Navigation("UserMedicals");
                });

            modelBuilder.Entity("DAL.Models.ChronicDisease", b =>
                {
                    b.Navigation("UserMedicalChronicDiseases");
                });

            modelBuilder.Entity("DAL.Models.DonationEvent", b =>
                {
                    b.Navigation("Registrations");
                });

            modelBuilder.Entity("DAL.Models.User", b =>
                {
                    b.Navigation("BloodRegistrations");

                    b.Navigation("DonationHistorys");

                    b.Navigation("UserMedicals");
                });

            modelBuilder.Entity("DAL.Models.UserMedical", b =>
                {
                    b.Navigation("UserMedicalChronicDiseases");
                });
#pragma warning restore 612, 618
        }
    }
}
